stages:
  - pages
  - build_sources
  - build_and_publish_docker_image


pages:
  stage: pages
  pages: true
  image: python:3.13-bookworm
  variables:
    LC_ALL: C.UTF-8
    LANG: C.UTF-8
  tags:
    - docker-linux
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - cd docs
    - pip install -r requirements.txt
    - sphinx-build -M html ./source ./build --fail-on-warning
  when: always
  pages:
    publish: docs/build/
  artifacts:
    paths:
      - docs/build/
  # rules:
  #   - if: $CI_COMMIT_TAG

# Start of download_cli stage
download_cli:
  stage: build_sources
  image: ubuntu:22.04
  tags:
    - docker-linux
  variables:
    CLI_REPO_ID: 68940749
  parallel:
    matrix:
      - GOARCH: amd64
        GOOS: 
          - linux
          - windows
  before_script:
    - apt update
    - apt install -y jq curl
  script:
    - CLI_PACKAGE_NAME=codebox-cli-${GOOS}
    - CLI_FILENAME=codebox-cli-${GOARCH}-${GOOS}
    - if [ "$GOOS" = "windows" ]; then CLI_FILENAME="${CLI_FILENAME}.exe"; fi

    - mkdir -p bin
    - cd bin

    - |
      LATEST_CLI_VERSION=$(curl --header "JOB-TOKEN: $CI_JOB_TOKEN" \
        --silent \
        --location \
        "${CI_API_V4_URL}/projects/${CLI_REPO_ID}/packages?package_name=${CLI_PACKAGE_NAME}&package_type=generic&order_by=created_at&sort=desc" | jq -r '.[0].version' \
      )

    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
           --location \
           --output codebox-cli-${GOOS}-${GOARCH} \
           "${CI_API_V4_URL}/projects/${CLI_REPO_ID}/packages/generic/${CLI_PACKAGE_NAME}/${LATEST_CLI_VERSION}/${CLI_FILENAME}"
           
  artifacts:
    paths:
      - bin/
    expire_in: 1 hour
  when: on_success
  rules:
    - if: $CI_COMMIT_TAG

# Start of build_sources stage
build_server:
  stage: build_sources
  image: golang:1.24.1
  tags:
    - docker-linux
  variables:
    GOOS: linux
    GOARCH: amd64
  script:
    - mkdir -p bin
    - go build -o bin/codebox -ldflags "-X gitlab.com/codebox4073715/codebox/config.ServerVersion=${CI_COMMIT_TAG}" main.go
  artifacts:
    paths:
      - bin/codebox
    expire_in: 1 hour
  when: on_success
  rules:
    - if: $CI_COMMIT_TAG


build_frontend:
  stage: build_sources
  image: node:20.12.2
  tags:
    - docker-linux
  script:
    - cd app
    - sed -i -e "s/{{ replace_me }}/$CI_COMMIT_TAG/g" .env.production
    - npm install
    - npm run build
  artifacts:
    paths:
      - app/build/
    expire_in: 1 hour
  when: on_success
  rules:
    - if: $CI_COMMIT_TAG


# Start of build_and_publish_docker_image stage
build_and_publish_docker_image:
  stage: build_and_publish_docker_image
  image: docker:24.0.5-dind
  tags:
    - docker-linux
  dependencies:
    - build_server
    - build_frontend
    - download_cli    
  script:
    - docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"
    - docker build -t dadebia/codebox:${CI_COMMIT_TAG} .
    - docker push dadebia/codebox:${CI_COMMIT_TAG}

    # Tag and push docker image as latest only if is not a beta version
    - |
      if ! [[ $CI_COMMIT_TAG =~ ^.*beta.* ]] ; then
        docker tag dadebia/codebox:${CI_COMMIT_TAG} dadebia/codebox:latest
        docker push dadebia/codebox:latest;
      fi;
  when: on_success
  rules:
    - if: $CI_COMMIT_TAG
