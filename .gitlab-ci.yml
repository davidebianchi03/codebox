stages:
  - download_cli
  - build_sources
  - build_and_publish_docker_image

# Start of download_cli stage
download_cli:
  stage: download_cli
  image: ubuntu:22.04
  tags:
    - docker-linux
  variables:
    CLI_REPO_ID: 68940749
  parallel:
    matrix:
      - GOARCH: amd64
        GOOS: 
          - linux
          - windows
  before_script:
    - apt update
    - apt install -y jq curl
  script:
    - CLI_PACKAGE_NAME=codebox-cli-${GOOS}
    - CLI_FILENAME=codebox-cli-${GOOS}-${GOARCH}
    - if [ "$GOOS" = "windows" ]; then CLI_FILENAME="${CLI_FILENAME}.exe"; fi

    - mkdir -p bin
    - cd bin
    - |
      LATEST_CLI_VERSION=$(curl --header "JOB-TOKEN: $CI_JOB_TOKEN" \
        --silent \
        --location \
        "${CI_API_V4_URL}/projects/${CLI_REPO_ID}/packages?package_name=${CLI_PACKAGE_NAME}&package_type=generic&order_by=created_at&sort=desc" | jq -r '.[0].version' \
      )
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
           --location \
           --codebox-cli-linux-amd64 \
           "${CI_API_V4_URL}/projects/${CLI_REPO_ID}/packages/generic/${CLI_PACKAGE_NAME}/${LATEST_CLI_VERSION}/${CLI_FILENAME}"
  artifacts:
    paths:
      - bin/
    expire_in: 1 hour
  when: on_success
  rules:
    - if: $CI_COMMIT_TAG

# Start of build_sources stage
build_server:
  stage: build_sources
  image: golang:1.24.1
  tags:
    - docker-linux
  variables:
    GOOS: linux
    GOARCH: amd64
  script:
    - mkdir -p bin
    - go build -o bin/codebox main.go
  artifacts:
    paths:
      - bin/codebox
    expire_in: 1 hour
  when: on_success
  rules:
    - if: $CI_COMMIT_TAG


build_frontend:
  stage: build_sources
  image: node:20.12.2
  tags:
    - docker-linux
  script:
    - cd app
    - sed -i -e "s/{{ replace_me }}/$CI_COMMIT_TAG/g" .env.production
    - npm install
    - npm run build
  artifacts:
    paths:
      - app/build/
    expire_in: 1 hour
  when: on_success
  rules:
    - if: $CI_COMMIT_TAG


# Start of build_and_publish_docker_image stage
build_and_publish_docker_image:
  stage: build_and_publish_docker_image
  image: docker:20.10.24
  tags:
    - docker-linux
  dependencies:
    - build_server
    - build_frontend
    - download_cli    
  before_script:
    - apk add --no-cache curl bash git
    - docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"
  script:
    

    # - mv bin/codebox ./bin/codebox-dir
    # - mv ./bin/codebox-dir/codebox ./bin/codebox
    # - rm -rf ./bin/codebox-dir
    # - bash docker/download-cli.sh

    # Docker build & push
    - export IMAGE_NAME=dadebia/codebox
    - export IMAGE_TAG=$CI_COMMIT_TAG
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG
  when: on_success
  rules:
    - if: $CI_COMMIT_TAG
